@use '../../foundation' as *;

.c-container {
  margin-left: auto;
  margin-right: auto;
  width: res_px_max($base_width_min, $base_width_max + $base_padding_max * 2);
  padding-left: res_px_max($base_padding_min, $base_padding_max);
  padding-right: res_px_max($base_padding_min, $base_padding_max);
  &.-narrow {
    width: res_px_max($base_width_min, $base_width_max - 250px + $base_padding_max * 2);
    @include mq-spmin {
      width: 100%;
    }
  }

  &.-lg {
    width: res_px_max($base_width_min, $base_width_max-lg + $base_padding_max * 2);
    @include mq-spmin {
      width: 100%;
    }
  }

  &.-course {
    width: res_px_max($base_width_min, $base_width_max - 100px + $base_padding_max * 2);
    @include mq-spmin {
      width: 100%;
    }
  }

  @include mq-spmin {
    width: 100%;
  }
}

.c-fluid {
  padding-left: res_px_max($base_padding_min, $base_padding_max);
  padding-right: res_px_max($base_padding_min, $base_padding_max);
}

.c-grid-container {
  display: grid;
  grid-template-columns:
    minmax(0, 1fr) minmax(0, res_px_max($base_width_min * 0.5 - $base_padding_min, $base_width_max * 0.5)) minmax(0, res_px_max($base_width_min * 0.5 - $base_padding_min, $base_width_max * 0.5))
    minmax(0, 1fr);
  @include mq-spmin {
    grid-template-columns:
      minmax(0, res_px_max($base_padding_min, $base_padding_max)) minmax(0, calc(50% - res_px_max($base_padding_min, $base_padding_max))) minmax(
        0,
        calc(50% - res_px_max($base_padding_min, $base_padding_max))
      )
      minmax(0, res_px_max($base_padding_min, $base_padding_max));
  }
  &.-course {
    padding-left: 100px;
    @include mq-sp {
      padding-left: 0;
    }
  }
}

.c-grid-fluid {
  display: grid;
  grid-template-columns:
    minmax(0, res_px_max($base_padding_min, $base_padding_max)) minmax(0, calc(50% - res_px_max($base_padding_min, $base_padding_max))) minmax(
      0,
      calc(50% - res_px_max($base_padding_min, $base_padding_max))
    )
    minmax(0, res_px_max($base_padding_min, $base_padding_max));
}

.c-grid-container,
.c-grid-fluid {
  > .col {
    &1 {
      &-2 {
        grid-column: 1 / 2;
      }
      &-3 {
        grid-column: 1 / 3;
      }
      &-4 {
        grid-column: 1 / 4;
      }
      &-5 {
        grid-column: 1 / 5;
      }
    }
    &2 {
      &-3 {
        grid-column: 2 / 3;
      }
      &-4 {
        grid-column: 2 / 4;
      }
      &-5 {
        grid-column: 2 / 5;
      }
    }
    &3 {
      &-4 {
        grid-column: 3 / 4;
      }
      &-5 {
        grid-column: 3 / 5;
      }
    }
    &4 {
      &-5 {
        grid-column: 4 / 5;
      }
    }
  }
  &.-nowrap {
    > [class*='col'] {
      grid-row: 1 / -1;
    }
  }
}
